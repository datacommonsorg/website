steps:
# Step 2: Setup Python virtual environment and dependencies
- name: 'python:3.11.4'
  id: 'setup-python'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      python3 -m venv .venv
      source .venv/bin/activate
      pip install --upgrade pip
      ./run_test.sh --setup_python
      ./run_test.sh --setup_nl

# Step 3: Install Protoc 3.21.12 (using a standard Linux image like `ubuntu`)
- name: 'ubuntu'
  id: 'install-protoc'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      apt-get update && apt-get install -y protobuf-compiler
      protoc --version | grep "3.21.12" || { echo "Protoc version mismatch!"; exit 1; }

# Step 4: Start NL Server in background
- name: 'python:3.11.4'
  id: 'start-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -euxo pipefail

      source .venv/bin/activate # Activate the virtual environment
      # Clear NL server cache/models before starting
      rm -rf ~/.datacommons # Home dir in Cloud Build is usually /builder/home
      rm -rf /tmp/datcom-nl-models
      rm -rf /tmp/datcom-nl-models-dev

      nohup ./run_nl_server.sh -p 6060 > nl_server.log 2>&1 &
      server_pid=$!
      echo "NL Server started with PID: ${server_pid} on port 6060, logging to nl_server.log"
      echo "${server_pid}" > /workspace/nl_server_pid.txt
  env:
    - 'GCP_PROJECT_ID=datcom-website-dev'
  waitFor: ['setup-python', 'install-protoc']

# Step 5: Wait for NL Server to be ready
- name: 'ubuntu'
  id: 'wait-for-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Install netcat (nc) utility
      apt-get update && apt-get install -y netcat || apt-get install -y netcat-traditional || apt-get install -y netcat-openbsd

      server_pid=$(cat /workspace/nl_server_pid.txt) # <--- Read PID from file
      echo "Retrieved NL Server PID: ${server_pid}"

      # Give the server a moment to start the process before checking the port
      
      sleep 5
      for i in $(seq 1 5); do
        nc -z localhost 6060 && echo "NL Server ready on port 6060!" && exit 0
        echo "Waiting for NL Server (attempt ${i}/5)..."
        sleep 5
      done
      echo "NL Server did not start in time on port 6060."
      echo "--- NL Server (nl_server.log) Contents on Failure ---"
      cat nl_server.log
      echo "----------------------------------------------------"
      exit 1 # Fail the build step
  waitFor: ['start-nl-server']

# Step 6: Update goldens
- name: 'python:3.11.4' # Use Python builder again to ensure venv is active
  id: 'update-goldens'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source .venv/bin/activate # Activate venv
      echo "Running your command to update goldens..."
      ./run_test.sh -g
  waitFor: ['wait-for-nl-server'] # Only run if server is ready

# Step 7: Stop NL Server (cleanup)
- name: 'ubuntu'
  id: 'stop-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      server_pid=$(cat /workspace/nl_server_pid.txt)
      echo "Retrieved NL Server PID for stop: ${server_pid}"

      if [ -n "${server_pid}" ]; then
        echo "Stopping NL Server with PID: ${server_pid}"
        kill "${server_pid}"
        sleep 5
        if ps -p "${server_pid}" > /dev/null; then
          echo "NL Server PID ${server_pid} is still running. Force killing..."
          kill -9 "${server_pid}"
        fi
      else
        echo "No server PID found to stop."
      fi
  waitFor: ['-'] # Run always, after all other steps, regardless of their success/failure

# Step 8: Commit and Create Pull Request
- name: 'gcr.io/cloud-builders/git'
  id: 'create-pr'
  entrypoint: 'bash'
  secretEnv: ['Github-write-token']
  args:
    - '-c'
    - |
      cd /workspace
      git config user.name "datacommons-robot-author"
      git config user.email "datacommons-robot-author@users.noreply.github.com"

      # Check if there are actual changes
      if git diff --exit-code; then
        echo "No changes detected. Skipping PR creation."
        exit 0
      fi

      git checkout -b nl-golden-update-${BUILD_ID}

      # Add and commit changes
      git add server/integration-tests/test_data/
      git commit -m "feat: Update goldens from Cloud Build workflow (build ${BUILD_ID})"

      # Set up Git remote with token for pushing
      REPO_FULL_NAME="${_GITHUB_ORG}/${_GITHUB_REPO}"
      g_remote_url="https://oauth2:${Github-write-token}@github.com/${REPO_FULL_NAME}.git"
      git remote set-url origin "${g_remote_url}"

      # Push the new branch
      git push origin HEAD

      echo "Pushed changes to branch: nl-golden-update-${BUILD_ID}"

      pr_title="Golden Updates from CI (Cloud Build ${BUILD_ID})"
      pr_body="This pull request updates the golden files automatically via the Cloud Build workflow. Please review the changes carefully. [Cloud Build Log](https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}?project=${PROJECT_ID})"
      base_branch="dwnoble-patch-1"

      echo "Creating PR for ${REPO_FULL_NAME} from nl-golden-update-${BUILD_ID} to ${base_branch}"

      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${Github-write-token}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "https://api.github.com/repos/${REPO_FULL_NAME}/pulls" \
        -d "{
          \"title\": \"${pr_title}\",
          \"body\": \"${pr_body}\",
          \"head\": \"nl-golden-update-${BUILD_ID}\",
          \"base\": \"${base_branch}\",
          \"labels\": [\"automated-pr\", \"goldens\"],
          \"draft\": false
        }"
      echo "PR creation command sent."
  waitFor: ['stop-nl-server']

availableSecrets:
  secretManager:
  - versionName: projects/datcom-ci/secrets/Github-write-token/versions/latest
    env: 'Github-write-token'

substitutions:
  _GITHUB_ORG: 'datacommonsorg'
  _GITHUB_REPO: 'website'

options:
  git_options:
    depth: 0 # Fetch full history