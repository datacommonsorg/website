# cloudbuild.yaml
# This file defines the steps for Google Cloud Build

steps:
- name: 'python:3.11.4'
  id: 'setup-python'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Cloud Build environments are usually clean.
      # Ensure pip and virtualenv are ready.
      python3 -m venv .venv
      source .venv/bin/activate
      pip install --upgrade pip
      ./run_test.sh --setup_python
      ./run_test.sh --setup_nl

# Step 3: Install Protoc 3.21.12 (using a standard Linux image like `ubuntu`)
- name: 'ubuntu'
  id: 'install-protoc'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      apt-get update && apt-get install -y protobuf-compiler
      protoc --version | grep "3.21.12" || { echo "Protoc version mismatch!"; exit 1; }


# Step 4: Start NL Server in background
- name: 'python:3.11.4'
  id: 'start-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source .venv/bin/activate # Activate the virtual environment
      # Clear NL server cache/models before starting
      rm -rf ~/.datacommons # Home dir in Cloud Build is usually /builder/home
      rm -rf /tmp/datcom-nl-models
      rm -rf /tmp/datcom-nl-models-dev

      # Run NL server in the background, redirecting all output to nl_server.log
      # Use `nohup` for robustness in a background process.
      # If your NL server is a Python app, consider running it with `python -u`
      # or setting `export PYTHONUNBUFFERED=1` within `run_nl_server.sh`
      # for unbuffered output to `nl_server.log`.
      nohup ./run_nl_server.sh -p 6060 > nl_server.log 2>&1 &
      SERVER_PID=$!
      echo "NL Server started with PID: $SERVER_PID on port 6060, logging to nl_server.log"
      # Store PID for subsequent steps
      echo "export SERVER_PID=$SERVER_PID" >> /workspace/env_vars.sh
  env: 
    GCP_PROJECT_ID: 'datcom-website-dev'
  waitFor: ['setup-python', 'setup-node', 'install-protoc']

# Step 5: Wait for NL Server to be ready
- name: 'ubuntu'
  id: 'wait-for-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Retrieve PID from previously stored env_vars.sh
      source /workspace/env_vars.sh

      # Give the server a moment to start the process before checking the port
      sleep 15
      for i in $(seq 1 60); do # Increased attempts for more patience (up to 10 minutes)
        # Use a more robust check if the NL server has a health endpoint, e.g.:
        # curl -s http://localhost:6060/healthz | grep -q "OK"
        nc -z localhost 6060 && echo "NL Server ready on port 6060!" && exit 0
        echo "Waiting for NL Server (attempt $i/60)..."
        sleep 10
      done
      echo "NL Server did not start in time on port 6060."
      # Display logs immediately on failure for debugging
      echo "--- NL Server (nl_server.log) Contents on Failure ---"
      cat nl_server.log
      echo "----------------------------------------------------"
      exit 1 # Fail the build step
  waitFor: ['start-nl-server']

# Step 6: Update goldens
- name: 'python:3.11.4' # Use Python builder again to ensure venv is active
  id: 'update-goldens'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source .venv/bin/activate # Activate venv
      echo "Running your command to update goldens..."
      ./run_test.sh -g
  waitFor: ['wait-for-nl-server'] # Only run if server is ready

# Step 7: Stop NL Server (cleanup)
- name: 'ubuntu'
  id: 'stop-nl-server'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Retrieve PID from previously stored env_vars.sh
      source /workspace/env_vars.sh

      if [ -n "$SERVER_PID" ]; then
        echo "Stopping NL Server with PID: $SERVER_PID"
        kill "$SERVER_PID"
        sleep 5
        if ps -p "$SERVER_PID" > /dev/null; then
          echo "NL Server PID $SERVER_PID is still running. Force killing..."
          kill -9 "$SERVER_PID"
        fi
      else
        echo "No server PID found to stop."
      fi
  waitFor: ['-'] # Run always, after all other steps, regardless of their success/failure

# Step 8: Commit and Create Pull Request
- name: 'gcr.io/cloud-builders/git' # Use the git builder
  id: 'create-pr'
  entrypoint: 'bash'
  secretEnv: ['GITHUB_PR_TOKEN'] # Name of the environment variable for your GitHub PAT
  args:
    - '-c'
    - |
      # Configure git user. This is crucial for the commit author.
      git config user.name "datacommons-robot-author"
      git config user.email "datacommons-robot-author@users.noreply.github.com"

      # Check if there are actual changes
      if git diff --exit-code; then
        echo "No changes detected. Skipping PR creation."
        exit 0
      fi

      # Cloud Build typically clones a fresh copy, so we need to set up remote for pushing
      # The default branch will be `main` or `master`.
      git checkout -b nl-golden-update-${BUILD_ID} # Use Cloud Build's unique ID for branch name

      # Add and commit changes
      git add server/integration-tests/test_data/
      git commit -m "feat: Update goldens from Cloud Build workflow (build ${BUILD_ID})"

      # Set up Git remote with token for pushing
      # This format uses the token for authentication when pushing to GitHub
      # Replace YOUR_GITHUB_ORG/YOUR_REPO_NAME with your actual repo path (e.g., datacommons/website)
      REPO_FULL_NAME="${_GITHUB_ORG}/${_GITHUB_REPO}" # Set these as substitutions in Cloud Build Trigger
      REMOTE_URL="https://oauth2:${GITHUB_PR_TOKEN}@github.com/${REPO_FULL_NAME}.git"
      git remote set-url origin "$REMOTE_URL"

      # Push the new branch
      git push origin HEAD # Push current branch

      echo "Pushed changes to branch: nl-golden-update-${BUILD_ID}"

      # Create Pull Request using curl to GitHub API
      # Cloud Build automatically sets up default env vars like PROJECT_ID, BUILD_ID
      PR_TITLE="Golden Updates from CI (Cloud Build ${BUILD_ID})"
      PR_BODY="This pull request updates the golden files automatically via the Cloud Build workflow. Please review the changes carefully. [Cloud Build Log](https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}?project=${PROJECT_ID})"
      BASE_BRANCH="dwnoble-patch-1" # Your target base branch

      echo "Creating PR for ${REPO_FULL_NAME} from nl-golden-update-${BUILD_ID} to ${BASE_BRANCH}"

      curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $GITHUB_PR_TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        "https://api.github.com/repos/${REPO_FULL_NAME}/pulls" \
        -d "{
          \"title\": \"$PR_TITLE\",
          \"body\": \"$PR_BODY\",
          \"head\": \"nl-golden-update-${BUILD_ID}\",
          \"base\": \"$BASE_BRANCH\",
          \"labels\": [\"automated-pr\", \"goldens\"],
          \"draft\": false
        }"
      echo "PR creation command sent."
  waitFor: ['stop-nl-server'] # Run after golden update and server stopped.
                                # Use 'stop-nl-server' as dependency since it's 'waitFor: ["-"]'
                                # to ensure it runs even if 'update-goldens' fails.


availableSecrets:
  secretManager:
  - versionName: projects/datcom-ci/secrets/github-pr-token/versions/latest
    env: 'Github-write-token'

substitutions:
  _GITHUB_ORG: 'datacommonsorg'
  _GITHUB_REPO: 'website'