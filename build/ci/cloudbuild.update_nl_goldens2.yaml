substitutions:
  _GITHUB_ORG: 'datacommonsorg'
  _GITHUB_REPO: 'website'
  _GITHUB_BRANCH: 'chore/update-submodules'
  _GITHUB_AUTHOR: 'datacommons-robot-author'

availableSecrets:
  secretManager:
  - versionName: projects/879489846695/secrets/GH_PAT/versions/latest
    env: 'ghsecret'


steps:
- name: 'gcr.io/cloud-builders/git'
  id: 'unshallow-git-clone'
  entrypoint: 'bash'
  secretEnv: ['ghsecret']
  args:
    - '-c'
    - |
      git config --global url."https://${_GITHUB_AUTHOR}:${ghsecret}@github.com/".insteadOf "https://github.com/"
      git config --global credential.helper store
      echo "https://${_GITHUB_AUTHOR}:${ghsecret}@github.com" > /root/.git-credentials
      chmod 600 /root/.git-credentials

      rm -rf /workspace/* /workspace/.[!.]*
      git clone "https://github.com/${_GITHUB_ORG}/${_GITHUB_REPO}.git" /workspace --branch "${_GITHUB_BRANCH}" --single-branch --depth 1

      echo "Git repository detected. Unshallowing clone..."
      git config --global --add safe.directory /workspace
      git fetch --unshallow
      echo "Git clone unshallowed successfully."

      git config user.name "${_GITHUB_AUTHOR}"
      git config user.email "${_GITHUB_AUTHOR}@users.noreply.github.com"

- name: 'python:3.11.4'
  id: 'run-nl-tests'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -euxo pipefail

      echo "Setting up Python virtual environment..."
      python3 -m venv .venv
      source .venv/bin/activate
      pip install --upgrade pip

      echo "Installing Python and NL dependencies..."
      ./run_test.sh --setup_python

      echo "Installing Protoc 3.21.12 and netcat..."
      apt-get update && apt-get install -y protobuf-compiler netcat-traditional || apt-get install -y netcat-openbsd
      protoc --version | grep "3.21.12" || { echo "Protoc version mismatch!"; exit 1; }

      echo "Clearing NL server cache/models..."
      rm -rf /builder/home/.datacommons || true
      rm -rf /tmp/datcom-nl-models || true
      rm -rf /tmp/datcom-nl-models-dev || true

      # echo "NL Server is ready. Running goldens update command..."
      ./run_test.sh -g
      echo "Goldens update completed. Cleaning up NL Server..."
  waitFor: ['unshallow-git-clone']

- name: 'ubuntu'
  id: 'create-pr'
  entrypoint: 'bash'
  secretEnv: ['ghsecret']
  args:
    - '-c'
    - |
      set -euxo pipefail

      apt-get update && apt-get install -y git gh
      cd /workspace || { echo "Failed to change directory to /workspace."; exit 1; }

      # git config --global url."https://${_GITHUB_AUTHOR}:${ghsecret}@github.com/".insteadOf "https://github.com/"
      # echo "https://${_GITHUB_AUTHOR}:${ghsecret}@github.com" > /root/.git-credentials
      # chmod 600 /root/.git-credentials
      # git config --global credential.helper store

      echo "Checking for changes in server/integration_tests/test_data/..."
      if git diff --exit-code --quiet -- server/integration_tests/test_data/; then
        echo "No changes detected in goldens in server/integration_tests/test_data/. Skipping PR creation."
        exit 0
      fi
      echo "Changes detected in goldens. Proceeding with PR creation."

      build_id_safe=$(echo "${BUILD_ID}" | tr -cd '[:alnum:]-')
      git checkout -b "nl-golden-update-${build_id_safe}"

      git add server/integration_tests/test_data/
      git commit -m "feat: Update goldens from Cloud Build workflow (build ${build_id_safe})"

      repo_full_name="${_GITHUB_ORG}/${_GITHUB_REPO}"
      g_remote_url="https://github.com/${repo_full_name}.git" # <--- CORRECTED LINE

      # if ! git remote get-url origin > /dev/null 2>&1; then
      #     git remote add origin "${g_remote_url}"
      # else
      git remote set-url origin "${g_remote_url}"
      # fi

      echo "Checking gh CLI authentication status..."
      export GH_TOKEN="${ghsecret}"

      git push origin "HEAD:nl-golden-update-${build_id_safe}"
      echo "Pushed changes to branch: nl-golden-update-${build_id_safe}"

      apt-get update && apt-get install -y gh

      pr_title="Golden Updates from CI (Cloud Build ${build_id_safe})"
      pr_body="This pull request updates the golden files automatically via the Cloud Build workflow. Please review the changes carefully. [Cloud Build Log](https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}?project=${PROJECT_ID})"

      echo "Creating PR for ${repo_full_name} from nl-golden-update-${build_id_safe} to ${_GITHUB_BRANCH} using gh CLI"

      pr_url=$(gh pr create \
        --repo "${_GITHUB_ORG}/${_GITHUB_REPO}" \
        --title "${pr_title}" \
        --body "${pr_body}" \
        --base "${_GITHUB_BRANCH}" \
        --head "nl-golden-update-${build_id_safe}" \
        --label "automated-pr")

      echo "PR creation command sent using gh CLI."
      echo "Pull Request URL: ${pr_url}"
  waitFor: ['run-nl-tests']