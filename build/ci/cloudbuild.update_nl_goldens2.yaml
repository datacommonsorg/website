substitutions:
  _GITHUB_ORG: 'datacommonsorg'
  _GITHUB_REPO: 'website'

steps:
- name: 'gcr.io/cloud-builders/git'
  id: 'unshallow-git-clone'
  entrypoint: 'bash'
  secretEnv: ['Github-write-token']
  args:
    - '-c'
    - |
      set -euxo pipefail

      rm -rf /workspace/* /workspace/.[!.]*
      repo_url="https://oauth2:${Github-write-token}@github.com/${_GITHUB_ORG}/${_GITHUB_REPO}.git"

      echo "Cloning repository ${_GITHUB_ORG}/${_GITHUB_REPO} branch dwnoble-patch-1..."
      git clone "${repo_url}" /workspace --branch chore/update-submodules --single-branch --depth 1

      cd /workspace

      echo "Git repository detected. Unshallowing clone..."
      git config --global --add safe.directory /workspace
      git fetch --unshallow
      echo "Git clone unshallowed successfully."

      git config user.name "datacommons-robot-author"
      git config user.email "datacommons-robot-author@users.noreply.github.com"


# Step 2: Run NL Server and Tests (Your combined step)
# This step remains largely the same, but now it can rely on the full Git history
# if `run_test.sh -g` needs it for any reason.
- name: 'python:3.11.4'
  id: 'run-nl-tests'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -euxo pipefail

      echo "Setting up Python virtual environment..."
      python3 -m venv .venv
      source .venv/bin/activate
      pip install --upgrade pip

      echo "Installing Python and NL dependencies..."
      ./run_test.sh --setup_python

      echo "Installing Protoc 3.21.12 and netcat..."
      apt-get update && apt-get install -y protobuf-compiler netcat-traditional || apt-get install -y netcat-openbsd
      protoc --version | grep "3.21.12" || { echo "Protoc version mismatch!"; exit 1; }

      echo "Clearing NL server cache/models..."
      rm -rf /builder/home/.datacommons || true
      rm -rf /tmp/datcom-nl-models || true
      rm -rf /tmp/datcom-nl-models-dev || true

      echo "Starting NL Server in background for test duration..."
      nohup ./run_nl_server.sh -p 6060 > nl_server.log 2>&1 &
      server_pid=$!
      echo "NL Server started with PID: ${server_pid} on port 6060, logging to nl_server.log"

      echo "Giving server a moment to start the process before checking the port..."
      sleep 5

      echo "Waiting for NL Server to be ready..."
      for i in $(seq 1 30); do
        if nc -z localhost 6060; then
          echo "NL Server ready on port 6060!"
          break
        fi
        echo "Waiting for NL Server (attempt ${i}/30)..."
        sleep 10
        if [ $i -eq 30 ]; then
          echo "ERROR: NL Server did not start in time on port 6060. Dumping logs."
          cat nl_server.log
          exit 1
        fi
      done

      echo "NL Server is ready. Running goldens update command..."
      ./run_test.sh -g

      echo "Goldens update completed. Cleaning up NL Server..."
      if kill "${server_pid}"; then
        echo "NL Server with PID ${server_pid} stopped cleanly."
      else
        echo "Failed to stop NL Server with PID ${server_pid}. It may have already exited."
      fi
      sleep 2
      if ps -p "${server_pid}" > /dev/null; then
          echo "NL Server PID ${server_pid} is still running after kill. Force killing..."
          kill -9 "${server_pid}" || true
      fi

      echo "Copying NL server log for potential debugging in subsequent steps (if needed)."
      cp nl_server.log /workspace/nl_server_final.log
  env:
    - 'GCP_PROJECT_ID=datcom-website-dev'
  waitFor: ['unshallow-git-clone']

# Step 3: Display NL Server Logs if the combined step failed
- name: 'ubuntu'
  id: 'display-nl-server-logs-on-failure'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "--- Contents of NL Server Log (nl_server_final.log) ---"
      if [ -f "/workspace/nl_server_final.log" ]; then
        cat /workspace/nl_server_final.log
      else
        echo "NL server log file not found at /workspace/nl_server_final.log"
      fi
      echo "----------------------------------------------------"
  waitFor: ['run-nl-tests']

- name: 'ubuntu'
  id: 'create-pr'
  entrypoint: 'bash'
  secretEnv: ['Github-write-token'] # Still need this if you're not using the GitHub App method for gh CLI
  args:
    - '-c'
    - |
      set -euxo pipefail

      apt-get update && apt-get install -y git gh
      cd /workspace || { echo "Failed to change directory to /workspace."; exit 1; }

      echo "Checking for changes in website/server/integration-tests/test_data/..."
      ls -la
      if git diff --exit-code --quiet -- website/server/integration-tests/test_data/; then
        echo "No changes detected in goldens in website/server/integration-tests/test_data/. Skipping PR creation."
        exit 0
      fi
      echo "Changes detected in goldens. Proceeding with PR creation."

      build_id_safe=$(echo "${BUILD_ID}" | tr -cd '[:alnum:]-')
      git checkout -b "nl-golden-update-${build_id_safe}"

      ls -la
      git add website/server/integration-tests/test_data/
      git commit -m "feat: Update goldens from Cloud Build workflow (build ${build_id_safe})"

      # Configure git remote if not done in unshallow step
      # If you used the git config credential.helper in the unshallow step,
      # this git push should already be authenticated.
      REPO_FULL_NAME="${_GITHUB_ORG}/${_GITHUB_REPO}"
      g_remote_url="https://oauth2:${Github-write-token}@github.com/${REPO_FULL_NAME}.git" # This part might be redundant if using App method fully

      # Ensure 'origin' remote is correctly configured, using the token for this specific push.
      # If you configured git credentials via /etc/git-secrets/oauth/github-oauth-token earlier,
      # then this `set-url` might not be necessary, or you'd just do `git remote set-url origin https://github.com/${REPO_FULL_NAME}.git`
      # without the token in the URL.
      if ! git remote get-url origin > /dev/null 2>&1; then
          git remote add origin "${g_remote_url}"
      else
          git remote set-url origin "${g_remote_url}"
      fi

      git push origin "HEAD:nl-golden-update-${build_id_safe}"

      echo "Pushed changes to branch: nl-golden-update-${build_id_safe}"

      # Install gh CLI for PR creation
      apt-get update && apt-get install -y gh

      # Authenticate gh CLI with your PAT from Secret Manager
      # This is the line that needs the Github-write-token for the GitHub API curl if not using GitHub App method
      export GH_TOKEN="${Github-write-token}"

      pr_title="Golden Updates from CI (Cloud Build ${build_id_safe})"
      pr_body="This pull request updates the golden files automatically via the Cloud Build workflow. Please review the changes carefully. [Cloud Build Log](https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}?project=${PROJECT_ID})"
      base_branch="chore/update-submodules"

      echo "Creating PR for ${REPO_FULL_NAME} from nl-golden-update-${build_id_safe} to ${base_branch} using gh CLI"

      gh pr create \
        --repo "${_GITHUB_ORG}/${_GITHUB_REPO}" \
        --title "${pr_title}" \
        --body "${pr_body}" \
        --base "${base_branch}" \
        --head "nl-golden-update-${build_id_safe}" \
        --label "automated-pr" \
        --label "goldens" \
        --json url
      echo "PR creation command sent using gh CLI."
  waitFor: ['run-nl-tests']

availableSecrets:
  secretManager:
  - versionName: projects/datcom-ci/secrets/Github-write-token/versions/latest
    env: 'Github-write-token'