substitutions:
  _GITHUB_ORG: 'datacommonsorg'
  _GITHUB_REPO: 'website'

steps:
- name: 'gcr.io/cloud-builders/git'
  id: 'unshallow-git-clone'
  entrypoint: 'bash'
  secretEnv: ['Github-write-token']
  args:
    - '-c'
    - |
      set -euxo pipefail

      # Configure Git to use the token for all GitHub HTTPS operations
      # This tells Git to rewrite 'https://github.com/' URLs to include the token for authentication.
      git config --global url."https://oauth2:${Github-write-token}@github.com/".insteadOf "https://github.com/"
      
      # Ensure that the credential helper is set to store for later uses (optional but good practice)
      git config --global credential.helper store
      echo "https://oauth2:${Github-write-token}@github.com" > /root/.git-credentials
      chmod 600 /root/.git-credentials

      # Clean up existing workspace
      rm -rf /workspace/* /workspace/.[!.]*
      
      # Now clone using the standard HTTPS URL; Git will use the configured credential helper
      echo "Cloning repository ${_GITHUB_ORG}/${_GITHUB_REPO} branch chore/update-submodules..."
      # Note: You can remove the oauth2:${Github-write-token}@ from the URL here
      # because the global config handles it.
      git clone "https://github.com/${_GITHUB_ORG}/${_GITHUB_REPO}.git" /workspace --branch chore/update-submodules --single-branch --depth 1


      echo "Git repository detected. Unshallowing clone..."
      git config --global --add safe.directory /workspace
      git fetch --unshallow
      echo "Git clone unshallowed successfully."

      git config user.name "datacommons-robot-author"
      git config user.email "datacommons-robot-author@users.noreply.github.com"

- name: 'python:3.11.4'
  id: 'run-nl-tests'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -euxo pipefail

      echo "Setting up Python virtual environment..."
      python3 -m venv .venv
      source .venv/bin/activate
      pip install --upgrade pip

      echo "Installing Python and NL dependencies..."
      ./run_test.sh --setup_python

      echo "Installing Protoc 3.21.12 and netcat..."
      apt-get update && apt-get install -y protobuf-compiler netcat-traditional || apt-get install -y netcat-openbsd
      protoc --version | grep "3.21.12" || { echo "Protoc version mismatch!"; exit 1; }

      echo "Clearing NL server cache/models..."
      rm -rf /builder/home/.datacommons || true
      rm -rf /tmp/datcom-nl-models || true
      rm -rf /tmp/datcom-nl-models-dev || true

      # echo "NL Server is ready. Running goldens update command..."
      ./run_test.sh -g
      git status --porcelain 

      echo "Goldens update completed. Cleaning up NL Server..."
  env:
    - 'GCP_PROJECT_ID=datcom-website-dev'
  waitFor: ['unshallow-git-clone']

# Step 3: Display NL Server Logs if the combined step failed
- name: 'ubuntu'
  id: 'display-nl-server-logs-on-failure'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "--- Contents of NL Server Log (nl_server_final.log) ---"
      if [ -f "/workspace/nl_server_final.log" ]; then
        cat /workspace/nl_server_final.log
      else
        echo "NL server log file not found at /workspace/nl_server_final.log"
      fi
      echo "----------------------------------------------------"
  waitFor: ['run-nl-tests']

- name: 'ubuntu'
  id: 'create-pr'
  entrypoint: 'bash'
  secretEnv: ['Github-write-token']
  args:
    - '-c'
    - |
      set -euxo pipefail

      apt-get update && apt-get install -y git gh
      cd /workspace || { echo "Failed to change directory to /workspace."; exit 1; }
      git config --global url."https://oauth2:${Github-write-token}@github.com/".insteadOf "https://github.com/"
      echo "https://oauth2:${Github-write-token}@github.com" > /root/.git-credentials
      chmod 600 /root/.git-credentials
      git config --global credential.helper store

      echo "Checking for changes in server/integration_tests/test_data/..."
      ls -la
      git status --porcelain
      if git diff --exit-code --quiet -- server/integration_tests/test_data/; then
        echo "No changes detected in goldens in server/integration_tests/test_data/. Skipping PR creation."
        exit 0
      fi
      echo "Changes detected in goldens. Proceeding with PR creation."

      build_id_safe=$(echo "${BUILD_ID}" | tr -cd '[:alnum:]-')
      git checkout -b "nl-golden-update-${build_id_safe}"

      ls -la
      git add server/integration_tests/test_data/
      git commit -m "feat: Update goldens from Cloud Build workflow (build ${build_id_safe})"

      repo_full_name="${_GITHUB_ORG}/${_GITHUB_REPO}"
      # REMOVE THE GITHUB TOKEN FROM THE URL HERE.
      # The global 'insteadOf' config from the first step should handle authentication.
      # You should set the remote URL to the standard HTTPS path.
      g_remote_url="https://github.com/${repo_full_name}.git" # <--- CORRECTED LINE

      # Ensure 'origin' remote is correctly configured.
      # Now, Git will automatically rewrite this URL using the 'insteadOf' rule.
      if ! git remote get-url origin > /dev/null 2>&1; then
          git remote add origin "${g_remote_url}"
      else
          git remote set-url origin "${g_remote_url}"
      fi

      git push origin "HEAD:nl-golden-update-${build_id_safe}"

      echo "Pushed changes to branch: nl-golden-update-${build_id_safe}"

      apt-get update && apt-get install -y gh

      export GH_TOKEN="${Github-write-token}"

      pr_title="Golden Updates from CI (Cloud Build ${build_id_safe})"
      pr_body="This pull request updates the golden files automatically via the Cloud Build workflow. Please review the changes carefully. [Cloud Build Log](https://console.cloud.google.com/cloud-build/builds/${BUILD_ID}?project=${PROJECT_ID})"
      base_branch="chore/update-submodules"

      echo "Creating PR for ${repo_full_name} from nl-golden-update-${build_id_safe} to ${base_branch} using gh CLI"

      gh pr create \
        --repo "${_GITHUB_ORG}/${_GITHUB_REPO}" \
        --title "${pr_title}" \
        --body "${pr_body}" \
        --base "${base_branch}" \
        --head "nl-golden-update-${build_id_safe}" \
        --label "automated-pr" \
        --label "goldens" \
        --json url
      echo "PR creation command sent using gh CLI."
  waitFor: ['run-nl-tests']

availableSecrets:
  secretManager:
  - versionName: projects/datcom-ci/secrets/Github-write-token/versions/latest
    env: 'Github-write-token'