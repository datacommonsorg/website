# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

availableSecrets:
  secretManager:
  - versionName: projects/879489846695/secrets/PERCY_TOKEN/versions/latest
    env: 'percy_token'

steps:
  - id: package_js
    name: gcr.io/datcom-ci/node:2024-11-19
    entrypoint: /bin/bash
    secretEnv: ['percy_token']
    waitFor: ["-"]
    args:
      - -c
      - |
        # The node docker image comes with a pre-installed node_modules directory.
        # Copy node_modules onto the static folder and update the node_module packages instead of downloading from scratch.
        # This step is done for speed, downloading the delta files is faster than downloading the entire dependencies.
        rm -rf static/node_modules
        cp -r /resources/node_modules -d static/

        # ./run_test.sh -b will build client packages.
        # These js files generated will be necessery for the flask_webdriver_test task.
        ./run_test.sh -b

        export PERCY_TOKEN=${percy_token}


  - id: setup_python_env
    name: gcr.io/datcom-ci/full-env:latest
    entrypoint: /bin/bash
    waitFor: ["package_js"]
    args:
      - -c
      - |
        # Check if Python is available. If not, install it.
        if ! command -v python3 &> /dev/null
        then
            echo "Python3 not found, installing..."
            # Adjust installation command based on the base image's OS (e.g., apt, yum, apk)
            # For Debian/Ubuntu-based images like many Google Cloud Build images:
            apt-get update && apt-get install -y python3 python3-venv python3-pip
        fi

        # Create the virtual environment if it doesn't exist
        if [ ! -d ".env" ]; then
            python3 -m venv .env
        fi

        # Activate the virtual environment
        . .env/bin/activate

        # Install Python dependencies
        # Assuming you have a requirements.txt file in your repository root
        if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
        else
            echo "requirements.txt not found. Skipping pip install."
            # Consider adding a warning or error if dependencies are expected
        fi
        # You might also need to install specific packages here
        # pip install selenium flask ...
        deactivate # Deactivate after setup, as each subsequent step will activate again.

  - id: flask_webdriver_test
    name: gcr.io/datcom-ci/webdriver-chrome:2025-01-15
    entrypoint: /bin/sh
    waitFor: ["package_js"]
    args:
      - -c
      - |
        . .env/bin/activate
        ./run_test.sh -w

  - id: flask_cdc_webdriver_test
    name: gcr.io/datcom-ci/full-env:latest
    entrypoint: /bin/sh
    waitFor: ["package_js"]
    args:
      - -c
      - |
        . .env/bin/activate
        export STARTUP_WAIT_SEC=60
        ./run_test.sh --cdc

timeout: 1800s # 30 minutes

options:
  machineType: "E2_HIGHCPU_32"