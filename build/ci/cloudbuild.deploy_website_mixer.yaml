# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This cloud build is triggered when there is a new mixer image pushed to artifact registry. It starts the mixer deployment via cloud deploy.

# In the cloudbuild.yaml for the Cloud Deploy pipeline.
substitutions:
  _SHORT_SHA: ""

steps:
  - name: 'gcr.io/cloud-builders/git'
    id: 'Initialize Submodules'
    args: ['submodule', 'update', '--init', '--recursive']

  # This step uses the _SHORT_SHA that was passed from the Pub/Sub message.
  - name: 'gcr.io/datcom-ci/datacommons-script-runner'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail

        # 1. DETERMINE WEBSITE IMAGE HASH
        # If _SHORT_SHA is passed from a website repo trigger, use it.
        if [[ -n "${_SHORT_SHA}" ]]; then
          echo "Using provided _SHORT_SHA for website images: ${_SHORT_SHA}"
          website_githash="${_SHORT_SHA}"
        else
          # If not, this was triggered by a mixer push. Find the most recent stable website image.
          echo "No _SHORT_SHA provided. Fetching latest website image hash from Artifact Registry."
          website_githash="$(gcloud container images list-tags us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-website \
            --project=datcom-ci \
            --filter="tags:latest" \
            --format='get(tags)' | tr ';' '\n' | grep -v "latest")"
        fi

        if [[ -z "$website_githash" ]]; then
          echo "ERROR: Could not determine the latest website image hash. Exiting."
          exit 1
        fi
        echo "Found latest website image hash: $website_githash"

        # 2. DETERMINE MIXER IMAGE HASH
        echo "Fetching latest mixer image hash..."
        mixer_githash="$(gcloud container images list-tags us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-mixer \
          --project=datcom-ci \
          --filter="tags:latest" \
          --format='get(tags)' | tr ';' '\n' | grep -v "latest")"

        if [[ -z "$mixer_githash" ]]; then
          echo "ERROR: Could not determine the mixer image hash from Artifact Registry. Exiting."
          exit 1
        fi
        echo "Found latest mixer image hash: $mixer_githash"

        # 3. CREATE DEPLOYMENT RELEASE
        # Use a timestamp for a consistently unique release name.
        release_name="release-${website_githash}-${mixer_githash}-$(date +%Y%m%d-%H%M%S)"
        echo "Creating release: $release_name"

        gcloud deploy apply --file=deploy/helm_charts/clouddeploy.yaml \
          --region=us-central1 \
          --project=datcom-ci

        # Note the '$$' to use the shell variables defined above inside this command.
        gcloud deploy releases create "$${release_name}" \
          --delivery-pipeline=datacommons-website \
          --region=us-central1 \
          --skaffold-file=skaffold.yaml \
          --images="gcr.io/datcom-ci/datacommons-website=us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-website:$${website_githash},gcr.io/datcom-ci/datacommons-mixer=us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-mixer:$${mixer_githash},gcr.io/datcom-ci/datacommons-nodejs=us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-nodejs:$${website_githash},gcr.io/datcom-ci/datacommons-nl=us-docker.pkg.dev/datcom-ci/gcr.io/datacommons-nl:$${website_githash}" \
          --deploy-parameters="mixer.githash=$${mixer_githash},MIXER_GITHASH=$${mixer_githash},website.githash=$${website_githash}" \
          --project=datcom-ci

        echo "Successfully created release $${release_name}."
