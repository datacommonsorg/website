# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

project:
  dev: datcom-website-dev
  staging: datcom-website-staging
  prod: datcom-website-prod

image:
  mixer: gcr.io/datcom-ci/datacommons-mixer:latest
  website:
    dev: website:local
    staging: gcr.io/datcom-ci/website:latest
    prod: gcr.io/datcom-ci/website:latest

pull_policy:
  dev: Never
  staging: Always
  prod: Always

args:
  mixer:
    bt_project: google.com:datcom-store-dev
    bt_instance: prophet-cache
    branch_folder:
      dev: "blank_branch_cache" # Emtpy branch cache folder for faster loading
      staging:
      prod:
  esp:
    non_gcp:
      dev: "--non_gcp"
      staging:
      prod:

# Node of "1" (regional) corresponding to 3 physical nodes (zonal).
# Each physical node of "4 vCPU and 32G memory" machine can allocate about 4 pods (0.85 vCPU and 10.5G memory, see below).
# So here we are looking at 1 : 9 ratio from "node" to "pod".
# To allow other resources and rollout buffer, use 1 : 6 ratio to give some buffer.
#
# Dev (Minikube) will always have 1 node and 1 pod.
scaling:
  nodes:
    dev: 1
    staging: 1
    prod: 10
  replicas:
    dev: 1
    staging: 6
    prod: 60

# Memory Request and Limit
# https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits

# Actual usage can be checked from GCP console: https://pantheon.corp.google.com/monitoring/dashboards/resourceList/kubernetes?project=datcom-mixer&pageState=(%22interval%22:(%22d%22:%22P7D%22),%22gkeTableState%22:(%22t%22:%22CONTAINER%22,%22vA%22:true),%22filter%22:(%22naF%22:(%22n%22:%22mixer%22,%22cF%22:(%22pN%22:%22projects%2Fdatcom-mixer%22,%22l%22:%22us-west2-c%22,%22n%22:%22mixer%22))))
# In prod/staging env, total memory is 2 + 8 + 0.5 = 10.5G
#
# Note the majority of mixer usage is branch cache, which can be cut by a lot after moving it out of memory.
# TODO(shifucun): understand website memory and cpu usage pattern and adjust accordingly.
mem:
  website:
    req:
      dev: 1G
      staging: 2G
      prod: 2G
    limit:
      dev: 1G
      staging: 2G
      prod: 2G
  mixer:
    req:
      dev: 1G
      staging: 8G
      prod: 8G
    limit:
      dev: 1G
      staging: 8G
      prod: 8G
  esp:
    req:
      dev: 0.1G
      staging: 0.5G
      prod: 0.5G
    limit:
      dev: 0.1G
      staging: 0.5G
      prod: 0.5G

# CPU Request and Limit
# https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits

# Actual usage can be checked from GCP console: https://pantheon.corp.google.com/monitoring/dashboards/resourceList/kubernetes?project=datcom-mixer&pageState=(%22interval%22:(%22d%22:%22P7D%22),%22gkeTableState%22:(%22t%22:%22CONTAINER%22,%22vA%22:true),%22filter%22:(%22naF%22:(%22n%22:%22mixer%22,%22cF%22:(%22pN%22:%22projects%2Fdatcom-mixer%22,%22l%22:%22us-west2-c%22,%22n%22:%22mixer%22))))
# In prod/staging env, total memory is 0.5 + 0.3 + 0.05 = 0.85
cpu:
  website:
    req:
      dev: 100m
      staging: 500m
      prod: 500m
    limit:
      dev: 100m
      staging: 500m
      prod: 500m
  mixer:
    req:
      dev: 100m
      staging: 300m
      prod: 300m
    limit:
      dev: 100m
      staging: 300m
      prod: 300m
  # From GCP dashboard, esp does not use that much of cpu.
  esp:
    req:
      dev: 10m
      staging: 50m
      prod: 50m
    limit:
      dev: 10m
      staging: 50m
      prod: 50m

bind_project:
  bigquery: google.com:datcom-store-dev
  bigtable: google.com:datcom-store-dev
  branch_cache: google.com:datcom-store-dev

gcs_bucket:
  dev: datcom-website-staging-resources
  staging: datcom-website-staging-resources
  prod: datcom-website-prod-resources
