# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Website App Kubernetes Deployment config. (https://kubernetes.io/docs/concepts/workloads/controllers/deployment/)
# This is to be extended by the dev/autopush/staging/prod overlay.
# The deployment contains Flask web server container , gRPC mixer container and ESP container that transcodes grpc to JSON.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: website-app
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 50%
  selector:
    matchLabels:
      app: website-app
  template:
    metadata:
      labels:
        app: website-app
    spec:
      # This k8s service account binds to the GCP service account, and used
      # for GKE Workload Identity: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
      serviceAccountName: website-ksa
      volumes:
        - name: schema-mapping
          configMap:
            name: schema-mapping
        - name: nl-config
          configMap:
            name: nl-config
        - name: memdb-config
          configMap:
            name: memdb-config
      containers:
        - name: website
          image: gcr.io/datcom-ci/datacommons-website:latest
          imagePullPolicy: Always
          args: []
          ports:
            - containerPort: 8080
          startupProbe:
            httpGet:
              path: /healthz
              port: 8080
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8080
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8080
          resources:
            limits:
              memory: "3G"
            requests:
              memory: "3G"
          env:
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: website-configmap
                  key: flaskEnv
            - name: ENABLE_MODEL
              valueFrom:
                configMapKeyRef:
                  name: website-configmap
                  key: enableModel
            - name: WEBSITE_HASH
              valueFrom:
                configMapKeyRef:
                  name: githash-configmap
                  key: website_hash.txt
            - name: BIG_QUERY
              valueFrom:
                configMapKeyRef:
                  name: store-configmap
                  key: bigquery.version
            # A dummy config used to bounce the server without any docker image
            # or data config change.
            - name: BOUNCE
              value: "dummy"
        - name: mixer
          image: gcr.io/datcom-ci/datacommons-mixer:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: "8G"
            requests:
              memory: "8G"
          args:
            - --host_project=$(HOST_PROJECT)
            - --bq_dataset=$(BIG_QUERY)
            - --schema_path=/datacommons/mapping
            - --base_bigtable_info=$(BASE_BIGTABLE_INFO)
            - --custom_bigtable_info=$(CUSTOM_BIGTABLE_INFO)
            - --memdb_path=/datacommons/memdb
          volumeMounts:
            - name: schema-mapping
              mountPath: /datacommons/mapping
            - name: memdb-config
              mountPath: /datacommons/memdb
          env:
            - name: HOST_PROJECT
              valueFrom:
                configMapKeyRef:
                  name: mixer-configmap
                  key: hostProject
            - name: BIG_QUERY
              valueFrom:
                configMapKeyRef:
                  name: store-configmap
                  key: bigquery.version
            - name: BASE_BIGTABLE_INFO
              valueFrom:
                configMapKeyRef:
                  name: store-configmap
                  key: base_bigtable_info.yaml
            - name: CUSTOM_BIGTABLE_INFO
              valueFrom:
                configMapKeyRef:
                  name: store-configmap
                  key: custom_bigtable_info.yaml
            - name: MIXER_HASH
              valueFrom:
                configMapKeyRef:
                  name: githash-configmap
                  key: mixer_hash.txt
          ports:
            - containerPort: 12345
          startupProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
            failureThreshold: 30

          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:12345"]
        - name: nl
          image: gcr.io/datcom-ci/datacommons-nl:abcxyz
          resources:
            limits:
              memory: "2G"
            requests:
              memory: "2G"
          env:
            - name: FLASK_ENV
              valueFrom:
                configMapKeyRef:
                  name: website-configmap
                  key: flaskEnv
          volumeMounts:
            - name: nl-config
              mountPath: /datacommons/nl
          startupProbe:
            httpGet:
              path: /healthz
              port: 6060
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6060
          livenessProbe:
            httpGet:
              path: /healthz
              port: 6060
          ports:
            - containerPort: 6060
        - name: esp
          image: gcr.io/endpoints-release/endpoints-runtime:1
          args:
            - --service=$(SERVICE_NAME)
            - --rollout_strategy=managed
            - --http_port=8081
            - --backend=grpc://127.0.0.1:12345
            - --cors_preset=basic
            - --healthz=healthz
          env:
            - name: SERVICE_NAME
              valueFrom:
                configMapKeyRef:
                  name: mixer-configmap
                  key: serviceName
          resources:
            limits:
              memory: "1G"
            requests:
              memory: "1G"
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8081
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            periodSeconds: 5
            initialDelaySeconds: 5
          ports:
            - containerPort: 8081
