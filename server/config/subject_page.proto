// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";
package datacommons;

// When a new placeholder is added in any topic page config, add that
// placeholder as a field in the ReplacementStrings interface in
// static/js/types/tile_types.ts.

// When adding a new config, make sure to add it to the list of configs that
// are tested by test_required_fields() in subject_page_configs_test.py


message SeverityFilter {
  string prop = 1;
  // Display string to use for the prop.
  string display_name = 5;
  string unit = 2;
  double lower_limit = 3;
  double upper_limit = 4;
}

message EventTypeSpec {
  // The key used for this event type.
  string id = 1;
  // The name to display for the event type.
  string name = 2;
  // List of event type dcids to include for this event type.
  repeated string event_type_dcids = 3;
  // Hex code for the color to use for this event type.
  string color = 4;
  // Default severity filter to use for this event type.
  SeverityFilter default_severity_filter = 5;
  // Severity filter overrides, keyed by place type.
  map<string, SeverityFilter> place_type_severity_filter = 10;
  // Properties to display from the propVals object of an event (in tooltips, ranking, etc).
  message DisplayProp {
    string prop = 1;
    string display_name = 2;
    string unit = 3;
  }
  repeated DisplayProp display_prop = 6;
  // List of props that could be used to hold the end date for this event type
  repeated string end_date_prop = 7;
  // The prop to use to get the polygon geojson for this event type
  string polygon_geo_json_prop = 8;
  // The prop to use to get the path geojson for this event type
  string path_geo_json_prop = 9;
}

message PageMetadata {
  string topic_id = 1;
  string topic_name = 2;
  // List of places supported by this config.
  repeated string place_dcid = 3;
  // Contained places to load for each parent place type.
  // This can be overwritten by tiles.
  map<string, string> contained_place_types = 4;
  // Event type information to be used by this config. The key is the event
  // type id and the value is the spec for that event type.
  map<string, EventTypeSpec> event_type_spec = 5;
}

message StatVarSpec {
  // The main stat var.
  string stat_var = 1;
  // [Optional] Denominator stat var.
  string denom = 2;
  string unit = 3;
  double scaling = 4;
  // [Optional] Whether or not to show this stat var on a log scale
  bool log = 5;
  // The name to use for the stat var in labels and titles.
  string name = 6;
}

// This ranks across child places for a single stat var.
message RankingTileSpec {
  bool show_highest = 1;
  bool show_lowest = 2;

  string diff_base_date = 5; // For comparisons

  // Titles can include the ${statVar} and ${date} placeholder.
  string highest_title = 6;
  string lowest_title = 7;

  // Number of items to show in the ranking tile. If not set, 5 items will be
  // shown.
  int32 ranking_count = 10;

  // If true, all highest and lowest sv's will be grouped into a single, multi-column table.
  // Ranking is done by the last specified SV for the tile.
  bool show_multi_column = 11;
}

message DisasterEventMapTileSpec {
  // Keys for event type specs defined in the PageMetadata that should be displayed as points on the map
  repeated string point_event_type_key = 1;
  // Keys for event type specs defined in the PageMetadata that should be displayed as polygons on the map
  repeated string polygon_event_type_key = 2;
  // Keys for event type specs defined in the PageMetadata that should be displayed as paths on the map
  repeated string path_event_type_key = 3;
}

message HistogramTileSpec {
  // Key for event type specs defined in the PageMetadata that should be displayed
  string event_type_key = 1;
  // Property of the events to aggregate. If blank, defaults to count.
  string prop = 2;
}

message TopEventTileSpec {
  // Key for event type specs defined in the PageMetadata that should be displayed
  // Ranked by severity prop.
  string event_type_key = 1;
  // Event properties to display. Uses the display string from EventTypeSpec.
  repeated string display_prop = 2;
  bool show_start_date = 3;
  bool show_end_date = 4;
  bool reverse_sort = 5;

  // Number of items to show in the ranking tile. If not set, 10 items will be
  // shown.
  int32 ranking_count = 6;
}

message ScatterTileSpec {
  bool highlight_top_right = 1;
  bool highlight_top_left = 2;
  bool highlight_bottom_right = 3;
  bool highlight_bottom_left = 4;
}

message BarTileSpec {
  // [optional] The root url to use for labels in the x-axis. If not specified,
  // labels in the x-axis will link to Place Explorer.
  string x_label_link_root = 1;
}

message Tile {
  // When adding a new TileType:
  // - make sure to update verify_tile in subject_page_configs_test.py with any
  //   required fields for your new TileType.
  // - specify what block types can render the tiles.
  // - update *_FILTER_TILE_TYPES in lib/subject_page_config.py
  enum TileType {
    TYPE_NONE = 0;
    // allowed in BlockTypes: TYPE_NONE
    LINE = 1;
    // allowed in BlockTypes: TYPE_NONE
    BAR = 2;
    // allowed in BlockTypes: TYPE_NONE
    MAP = 3;
    // allowed in BlockTypes: TYPE_NONE
    SCATTER = 4;
    // allowed in BlockTypes: TYPE_NONE
    BIVARIATE = 5;
    // allowed in BlockTypes: TYPE_NONE
    RANKING = 6;
    // allowed in BlockTypes: TYPE_NONE
    HIGHLIGHT = 7;
    // allowed in BlockTypes: TYPE_NONE
    DESCRIPTION = 8;
    // allowed in BlockTypes: TYPE_NONE
    HISTOGRAM = 10;
    // allowed in BlockTypes: DISASTER_EVENT
    PLACE_OVERVIEW = 11;
    // allowed in BlockTypes: DISASTER_EVENT
    TOP_EVENT = 12;
    // allowed in BlockTypes: DISASTER_EVENT
    DISASTER_EVENT_MAP = 9;
  }
  // Must be specified for all visual tiles. Supports ${statVar}, ${placeName} placeholders.
  // For map, bar, ranking: supports ${date} placeholder.
  // For scatter: supports ${xDate} and ${yDate} placeholder.
  string title = 1;
  // Must be set for HIHGLIGHT tiles
  string description = 2;
  TileType type = 3;
  // Key for a StatVarSpec defined in the containing Category
  repeated string stat_var_key = 4;
  // [optional] a list of place dcids used for this tile. Can also be "self" to
  // use the main place id of the page. Only used for BAR tiles.
  repeated string comparison_places = 7;
  // [optional] If set, used instead of main place for the page.
  string place_dcid_override = 11;

  // specs for specific tile types
  oneof tile_type_spec {
    RankingTileSpec ranking_tile_spec = 5;
    DisasterEventMapTileSpec disaster_event_map_tile_spec = 6;
    TopEventTileSpec top_event_tile_spec = 8;
    ScatterTileSpec scatter_tile_spec = 9;
    HistogramTileSpec histogram_tile_spec = 10;
    BarTileSpec bar_tile_spec = 12;
  }
}

message Block {
  // Title and description can include ${placeName} and ${place_dcid} placeholder strings.
  string title = 1;
  string description = 2;
  // Footnote that goes across the bottom of each block. Multiple footnotes can
  // be added, separated by "\n\n".
  string footnote = 5;

  message Column {
    repeated Tile tiles = 1;
  }
  repeated Column columns = 3;

  // When adding a new BlockType, make sure to update BLOCK_TYPE_ALLOWED_TILES
  // in subject_page_config_content_test.py with allowed TileTypes for the new
  // BlockType.
  enum BlockType {
    TYPE_NONE = 0;
    DISASTER_EVENT = 1;
  }
  BlockType type = 4;
}

message Category {
  // Title and description can include ${placeName} and ${place_dcid} placeholder strings.
  string title = 1;
  // Description can also have markdown.
  string description = 2;
  map<string, StatVarSpec> stat_var_spec = 4;
  repeated Block blocks = 3;
}

message SubjectPageConfig {
  PageMetadata metadata = 1;
  repeated Category categories = 2;
}