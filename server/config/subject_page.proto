// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";
package datacommons;

// When a new placeholder is added in any topic page config, add that
// placeholder as a field in the ReplacementStrings interface in
// static/js/types/tile_types.ts.

// When adding a new config, make sure to add it to the list of configs that
// are tested by test_required_fields() in subject_page_configs_test.py


message EventTypeSpec {
  // The key used for this event type.
  string id = 1;
  // The name to display for the event type.
  string name = 2;
  // List of event type dcids to include for this event type.
  repeated string event_type_dcids = 3;
  // Hex code for the color to use for this event type.
  string color = 4;
  // List of properties used to show the severity of this event type.
  repeated string severity_props = 5;
}

message PageMetadata {
  string topic_id = 1;
  string topic_name = 2;
  // List of places supported by this config.
  repeated string place_dcid = 3;
  // Contained places to load for each parent place type.
  // This can be overwritten by tiles.
  map<string, string> contained_place_types = 4;
  // Event type information to be used by this config. The key is the event
  // type id and the value is the spec for that event type.
  map<string, EventTypeSpec> event_type_spec = 5;
}

message StatVarSpec {
  // The main stat var.
  string stat_var = 1;
  // [Optional] Denominator stat var.
  string denom = 2;
  string unit = 3;
  double scaling = 4;
  // [Optional] Whether or not to show this stat var on a log scale
  bool log = 5;
  // The name to use for the stat var in labels and titles.
  string name = 6;
}

message RankingTileSpec {
  bool show_highest = 1;
  bool show_lowest = 2;
  bool show_increase = 3;
  bool show_decrease = 4;

  string diff_base_date = 5; // For comparisons

  string highest_title = 6;
  string lowest_title = 7;
  string increase_title = 8;
  string decrease_title = 9;
}

message DisasterEventMapTileSpec {
  // Keys for event type specs defined in the PageMetadata that should be displayed
  repeated string event_type_keys = 1;
}

message Tile {
  // When adding a new TileType, make sure to update verify_tile in subject_page_configs_test.py
  // with any required fields for your new TileType.
  enum TileType {
    TYPE_NONE = 0;
    LINE = 1;
    BAR = 2;
    MAP = 3;
    SCATTER = 4;
    BIVARIATE = 5;
    RANKING = 6;
    HIGHLIGHT = 7;
    DESCRIPTION = 8;
    DISASTER_EVENT_MAP = 9;
    HISTOGRAM = 10;
  }
  // Must be specified for all visual tiles
  string title = 1;
  // Must be set for HIHGLIGHT tiles
  string description = 2;
  TileType type = 3;
  // Key for a StatVarSpec defined in the containing Category
  repeated string stat_var_key = 4;

  // specs for specific tile types
  oneof tile_type_spec {
    RankingTileSpec ranking_tile_spec = 5;
    DisasterEventMapTileSpec disaster_event_map_tile_spec = 6;
  }
}

message Block {
  string title = 1;
  string description = 2;

  message Column {
    repeated Tile tiles = 1;
  }
  repeated Column columns = 3;
}

message Category {
  string title = 1;
  string description = 2;
  map<string, StatVarSpec> stat_var_spec = 4;
  repeated Block blocks = 3;
}

message SubjectPageConfig {
  PageMetadata metadata = 1;
  repeated Category categories = 2;
}